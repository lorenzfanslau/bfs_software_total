/*
* Brian R Taylor
* brian.taylor@bolderflight.com
* 
* Copyright (c) 2021 Bolder Flight Systems Inc
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the “Software”), to
* deal in the Software without restriction, including without limitation the
* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
* sell copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*/

/*
* This protobuf file describes the data log format, which is transpiled
* to a C header and source file for use in the flight code. There should
* only be a single message defined, DatalogMessage, which defines all
* of the data to be logged. The message structure should be flat
* (i.e. no nested messages), consisting of native types.
*/

syntax = "proto3";

/* Data log message */
message DatalogMessage {
  /* System data */
  int32 sys_frame_time_us = 1;
  float sys_input_volt = 2;
  float sys_reg_volt = 3;
  float sys_pwm_volt = 4;
  float sys_sbus_volt = 5;
  double sys_time_s = 6;
  /* Inceptor data */
  bool incept_new_data = 20;
  bool incept_lost_frame = 21;
  bool incept_failsafe = 22;
  bool incept_ch17 = 23;
  bool incept_ch18 = 24;
  repeated int32 incept_ch = 25;
  /* IMU data */
  bool imu_new_data = 40;
  bool imu_new_mag_data = 41;
  bool imu_healthy = 42;
  bool imu_mag_healthy = 43;
  float imu_die_temp_c = 44;
  repeated float imu_accel_mps2 = 45;
  repeated float imu_gyro_radps = 46;
  repeated float imu_mag_ut = 47;
  /* GNSS data */
  bool gnss_new_data = 60;
  bool gnss_healthy = 61;
  int32 gnss_fix = 62;
  int32 gnss_num_sats = 63;
  int32 gnss_week = 64;
  int32 gnss_tow_ms = 65;
  float gnss_alt_wgs84_m = 66;
  float gnss_alt_msl_m = 67;
  float gnss_hdop = 68;
  float gnss_vdop = 69;
  float gnss_track_rad = 70;
  float gnss_spd_mps = 71;
  float gnss_horz_acc_m = 72;
  float gnss_vert_acc_m = 73;
  float gnss_vel_acc_mps = 74;
  float gnss_track_acc_rad = 75;
  repeated float gnss_ned_vel_mps = 76;
  double gnss_lat_rad = 77;
  double gnss_lon_rad = 78;
  /* Pressure data */
  bool pitot_static_installed = 90;
  bool pres_static_new_data = 91;
  bool pres_static_healthy = 92;
  float pres_static_pres_pa = 93;
  float pres_static_die_temp_c = 94;
  bool pres_diff_new_data = 95;
  bool pres_diff_healthy = 96;
  float pres_diff_pres_pa = 97;
  float pres_diff_die_temp_c = 98;
  /* Analog Data */
  repeated float adc_volt = 110;
  /* Nav data */
  bool nav_initialized = 130;
  float nav_pitch_rad = 131;
  float nav_roll_rad = 132;
  float nav_heading_rad = 133;
  float nav_alt_wgs84_m = 134;
  float nav_home_alt_wgs84_m = 135;
  float nav_alt_msl_m = 136;
  float nav_alt_rel_m = 137;
  float nav_static_pres_pa = 138;
  float nav_diff_pres_pa = 139;
  float nav_alt_pres_m = 140;
  float nav_ias_mps = 141;
  float nav_gnd_spd_mps = 142;
  float nav_gnd_track_rad = 143;
  float nav_flight_path_rad = 144;
  repeated float nav_accel_bias_mps2 = 145;
  repeated float nav_gyro_bias_radps = 146;
  repeated float nav_accel_mps2 = 147;
  repeated float nav_gyro_radps = 148;
  repeated float nav_mag_ut = 149;
  repeated float nav_ned_pos_m = 150;
  repeated float nav_ned_vel_mps = 151;
  double nav_lat_rad = 152;
  double nav_lon_rad = 153;
  double nav_home_lat_rad = 154;
  double nav_home_lon_rad = 155;
  /* VMS data */
  bool vms_waypoint_reached = 170;
  bool vms_sbus_ch17 = 171;
  bool vms_sbus_ch18 = 172;
  bool vms_motors_enabled = 173;
  int32 vms_mode = 174;
  float vms_throttle_cmd_prcnt = 175;
  repeated int32 vms_sbus_cnt = 181;
  repeated int32 vms_pwm_cnt = 182;
  repeated float vms_analog = 183;
  repeated float vms_sbus_cmd = 184;
  repeated float vms_pwm_cmd = 185;
  repeated float vms_aux = 186;
  /* Telemetry data */
  int32 waypoint_frame = 200;
  int32 waypoint_cmd = 201;
  float waypoint_param1 = 202;
  float waypoint_param2 = 203;
  float waypoint_param3 = 204;
  float waypoint_param4 = 205;
  sint32 waypoint_x = 206;
  sint32 waypoint_y = 207;
  float waypoint_z = 208;
  repeated float telem_param = 209;
}
